{"version":3,"file":"index.js","sources":["../src/utils.ts","../src/index.ts"],"sourcesContent":["export const log = (...args: string[]): void => {\r\n  console.log(`[LOG] ${new Date().toISOString()}: ${args.join(\" \")}`);\r\n};\r\n","import axios from \"axios\";\r\nimport {\r\n  ApiResponse,\r\n  IFlag,\r\n  IFeatureFlagEvent,\r\n  IFlags,\r\n  IFlagsCache,\r\n  IFlagtronConfig,\r\n} from \"./types\";\r\nimport { WebSocket } from \"ws\";\r\nimport { log } from \"./utils\";\r\n\r\nconst getAllFlags = async (\r\n  flagsmithApi: string,\r\n  flagsmithEnvironmentId: string\r\n): Promise<ApiResponse<IFlags>> => {\r\n  const response = await axios.get<IFlags>(`${flagsmithApi}/api/v1/flags`, {\r\n    headers: { \"x-environment-key\": flagsmithEnvironmentId },\r\n  });\r\n\r\n  if (response.status !== 200) {\r\n    return { status: false };\r\n  }\r\n\r\n  if (!Array.isArray(response.data)) {\r\n    return { status: false };\r\n  }\r\n\r\n  return { status: true, data: response.data };\r\n};\r\n\r\nexport class Flagtron {\r\n  public flags: IFlagsCache;\r\n  private dependencies: Set<string>;\r\n  private flagsmithApi: string;\r\n  private flagsmithEnvironmentId: string;\r\n  private flagtronWebsocketServer: string;\r\n  private reconnectInterval: number;\r\n  private reconnectAttempts: number;\r\n  private maxReconnectAttempts: number; // To prevent infinite loops\r\n  private isInitialized: boolean;\r\n  private initializingPromise: Promise<boolean> | null = null;\r\n  private websocket: WebSocket | null;\r\n  public onFlagUpdate?: (flag: IFlag & { name: string }) => void;\r\n\r\n  constructor(config: IFlagtronConfig) {\r\n    this.flags = {};\r\n    this.dependencies = new Set(config.dependencies);\r\n    this.flagsmithApi = config.flagsmithApi;\r\n    this.reconnectAttempts = 0;\r\n    this.flagsmithEnvironmentId = config.flagsmithEnvironmentId;\r\n    this.flagtronWebsocketServer = config.flagtronWebsocketServer;\r\n    this.reconnectInterval = config.reconnectInterval ?? 5000;\r\n    this.maxReconnectAttempts = config.maxReconnectAttempts ?? 10;\r\n    this.websocket = null;\r\n    this.isInitialized = false;\r\n    this.onFlagUpdate = config.onFlagUpdate;\r\n  }\r\n\r\n  private listenForChanges(): Promise<void> {\r\n    const _this = this;\r\n    return new Promise(function (resolve, reject) {\r\n      if (_this.websocket) {\r\n        _this.websocket?.removeAllListeners(); // Properly remove previous listeners\r\n        _this.websocket?.close(); // Close existing WebSocket if open\r\n        log(\r\n          \"(Flagtron STAT) Existing WebSocket found. Closing and removing listeners.\"\r\n        );\r\n      }\r\n\r\n      _this.websocket = new WebSocket(_this.flagtronWebsocketServer);\r\n\r\n      _this.websocket.on(\"open\", () => {\r\n        log(\"(Flagtron STAT) Connected to Flagtron WebSocket.\");\r\n        _this.isInitialized = true;\r\n        _this.reconnectAttempts = 0; // Reset on successful connection\r\n        resolve();\r\n      });\r\n\r\n      _this.websocket.on(\"message\", (data: Buffer) => {\r\n        try {\r\n          const flagEvent: IFeatureFlagEvent = JSON.parse(data.toString());\r\n\r\n          if (!flagEvent?.data?.new_state) {\r\n            return;\r\n          }\r\n\r\n          const featureState = flagEvent.data.new_state;\r\n\r\n          if (_this.dependencies.has(featureState.feature.name)) {\r\n            _this.flags[featureState.feature.name] = {\r\n              enabled: featureState.enabled,\r\n              value:\r\n                featureState.feature_state_value ??\r\n                featureState.feature.initial_value,\r\n            };\r\n\r\n            _this?.onFlagUpdate?.({\r\n              ..._this.flags[featureState.feature.name],\r\n              name: featureState.feature.name,\r\n            });\r\n          }\r\n        } catch (error: unknown) {\r\n          if (error instanceof Error) {\r\n            log(\r\n              \"(Flagtron ERR) Error parsing WebSocket message:\",\r\n              error.message\r\n            );\r\n          }\r\n        }\r\n      });\r\n\r\n      _this.websocket.on(\"close\", (code, reason) => {\r\n        log(\r\n          `(Flagtron ERR) WebSocket closed. Code: ${code}, Reason: ${reason.toString()}`\r\n        );\r\n        _this.reconnectWebSocket();\r\n      });\r\n    });\r\n  }\r\n\r\n  private reconnectWebSocket() {\r\n    if (this.reconnectAttempts >= this.maxReconnectAttempts) {\r\n      log(\r\n        \"(Flagtron ERR) Max reconnect attempts reached. Stopping WebSocket reconnection.\"\r\n      );\r\n      return;\r\n    }\r\n\r\n    this.reconnectAttempts++;\r\n\r\n    setTimeout(() => this.listenForChanges(), this.reconnectInterval);\r\n  }\r\n  public async initialize() {\r\n    if (this.initializingPromise) {\r\n      return this.initializingPromise;\r\n    }\r\n\r\n    this.initializingPromise = (async () => {\r\n      if (!this.flagsmithApi || !this.flagsmithEnvironmentId) {\r\n        throw new Error(\r\n          \"No Flagsmith API key or environment ID provided. Exiting.\"\r\n        );\r\n      }\r\n\r\n      const flags = await getAllFlags(\r\n        this.flagsmithApi,\r\n        this.flagsmithEnvironmentId\r\n      );\r\n\r\n      if (!flags.status || !flags.data) {\r\n        throw new Error(\"Error fetching initial flags from Flagsmith\");\r\n      }\r\n\r\n      flags.data.forEach((flag) => {\r\n        if (!this.dependencies.has(flag.feature.name)) {\r\n          return;\r\n        }\r\n        this.flags[flag.feature.name] = {\r\n          enabled: flag.enabled,\r\n          value: flag.feature_state_value ?? flag.feature.initial_value,\r\n        };\r\n      });\r\n\r\n      await this.listenForChanges();\r\n      return true;\r\n    })();\r\n\r\n    return this.initializingPromise;\r\n  }\r\n\r\n  public getFlag(flagName: string): IFlag | undefined {\r\n    if (!this.isInitialized) {\r\n      throw new Error(\"Flagtron not initialized. Call initialize() first.\");\r\n    }\r\n\r\n    return this.flags[flagName];\r\n  }\r\n}\r\n\r\nexport default Flagtron;\r\n"],"names":["WebSocket"],"mappings":"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"}