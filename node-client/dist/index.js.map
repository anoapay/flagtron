{"version":3,"file":"index.js","sources":["../src/utils.ts","../src/index.ts"],"sourcesContent":["export const log = (...args: string[]): void => {\r\n  console.log(`[LOG] ${new Date().toISOString()}: ${args.join(\" \")}`);\r\n};\r\n","import axios from \"axios\";\r\nimport {\r\n  ApiResponse,\r\n  IFlag,\r\n  IFeatureFlagEvent,\r\n  IFlags,\r\n  IFlagsCache,\r\n  IFlagtronConfig,\r\n} from \"./types\";\r\nimport { WebSocket } from \"ws\";\r\nimport { log } from \"./utils\";\r\n\r\nconst getAllFlags = async (\r\n  flagsmithApi: string,\r\n  flagsmithEnvironmentId: string\r\n): Promise<ApiResponse<IFlags>> => {\r\n  const response = await axios.get<IFlags>(`${flagsmithApi}/api/v1/flags`, {\r\n    headers: { \"x-environment-key\": flagsmithEnvironmentId },\r\n  });\r\n\r\n  if (response.status !== 200) {\r\n    return { status: false };\r\n  }\r\n\r\n  if (!Array.isArray(response.data)) {\r\n    return { status: false };\r\n  }\r\n\r\n  return { status: true, data: response.data };\r\n};\r\n\r\nexport class Flagtron {\r\n  public flags: IFlagsCache;\r\n  private dependencies: Set<string>;\r\n  private flagsmithApi: string;\r\n  private flagsmithEnvironmentId: string;\r\n  private flagtronWebsocketServer: string;\r\n  private reconnectInterval: number;\r\n  private reconnectAttempts: number;\r\n  private maxReconnectAttempts: number; // To prevent infinite loops\r\n  private isInitialized: boolean;\r\n  private websocket: WebSocket | null;\r\n  private onFlagUpdate?: (flag: IFlag) => void;\r\n\r\n  constructor(config: IFlagtronConfig) {\r\n    this.flags = {};\r\n    this.dependencies = new Set(config.dependencies);\r\n    this.flagsmithApi = config.flagsmithApi;\r\n    this.reconnectAttempts = 0;\r\n    this.flagsmithEnvironmentId = config.flagsmithEnvironmentId;\r\n    this.flagtronWebsocketServer = config.flagtronWebsocketServer;\r\n    this.reconnectInterval = config.reconnectInterval ?? 5000;\r\n    this.maxReconnectAttempts = config.maxReconnectAttempts ?? 10;\r\n    this.websocket = null;\r\n    this.isInitialized = false;\r\n    this.onFlagUpdate = config.onFlagUpdate;\r\n  }\r\n\r\n  private listenForChanges() {\r\n    if (this.websocket) {\r\n      this.websocket?.removeAllListeners(); // Properly remove previous listeners\r\n      this.websocket?.close(); // Close existing WebSocket if open\r\n    }\r\n\r\n    this.websocket = new WebSocket(this.flagtronWebsocketServer);\r\n\r\n    this.websocket.on(\"open\", () => {\r\n      log(\"Connected to Flagtron WebSocket.\");\r\n\r\n      this.isInitialized = true;\r\n      this.reconnectAttempts = 0; // Reset on successful connection\r\n    });\r\n\r\n    this.websocket.on(\"message\", (data: Buffer) => {\r\n      try {\r\n        const flagEvent: IFeatureFlagEvent = JSON.parse(data.toString());\r\n\r\n        if (!flagEvent?.data?.new_state) {\r\n          return;\r\n        }\r\n\r\n        const featureState = flagEvent.data.new_state;\r\n\r\n        if (this.dependencies.has(featureState.feature.name)) {\r\n          this.flags[featureState.feature.name] = {\r\n            enabled: featureState.enabled,\r\n            value:\r\n              featureState.feature_state_value ??\r\n              featureState.feature.initial_value,\r\n          };\r\n\r\n          this?.onFlagUpdate?.(this.flags[featureState.feature.name]);\r\n\r\n          log(`Updated flag: ${featureState.feature.name}`);\r\n        }\r\n      } catch (error: unknown) {\r\n        if (error instanceof Error) {\r\n          log(\"(Flagtron ERR) Error parsing WebSocket message:\", error.message);\r\n        }\r\n      }\r\n    });\r\n\r\n    this.websocket.on(\"close\", (code, reason) => {\r\n      log(\r\n        `(Flagtron ERR) WebSocket closed. Code: ${code}, Reason: ${reason.toString()}`\r\n      );\r\n      this.reconnectWebSocket();\r\n    });\r\n  }\r\n\r\n  private reconnectWebSocket() {\r\n    if (this.reconnectAttempts >= this.maxReconnectAttempts) {\r\n      log(\r\n        \"(Flagtron ERR) Max reconnect attempts reached. Stopping WebSocket reconnection.\"\r\n      );\r\n      return;\r\n    }\r\n\r\n    this.reconnectAttempts++;\r\n\r\n    setTimeout(() => this.listenForChanges(), this.reconnectInterval);\r\n  }\r\n  public async initialize() {\r\n    // Initialize cache by getting all flags directly from flagsmith and checking connection\r\n    if (!this.flagsmithApi || !this.flagsmithEnvironmentId) {\r\n      throw new Error(\r\n        \"No Flagsmith API key or environment ID provided. Exiting.\"\r\n      );\r\n    }\r\n\r\n    const flags = await getAllFlags(\r\n      this.flagsmithApi,\r\n      this.flagsmithEnvironmentId\r\n    );\r\n\r\n    if (!flags.status || !flags.data) {\r\n      throw new Error(\"Error fetching initial flags from Flagsmith\");\r\n    }\r\n\r\n    flags.data.forEach((flag) => {\r\n      if (!this.dependencies.has(flag.feature.name)) {\r\n        return;\r\n      }\r\n      this.flags[flag.feature.name] = {\r\n        enabled: flag.enabled,\r\n        value: flag.feature_state_value ?? flag.feature.initial_value,\r\n      };\r\n    });\r\n\r\n    // Start listening for changes on the websocket\r\n    this.listenForChanges();\r\n  }\r\n\r\n  public getFlag(flagName: string): IFlag | undefined {\r\n    if (!this.isInitialized) {\r\n      throw new Error(\"Flagtron not initialized. Call initialize() first.\");\r\n    }\r\n\r\n    return this.flags[flagName];\r\n  }\r\n}\r\n\r\nexport default Flagtron;\r\n"],"names":["WebSocket"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAO,MAAM,GAAG,GAAG,CAAC,GAAG,IAAc,KAAU;AAC7C,IAAA,OAAO,CAAC,GAAG,CAAC,SAAS,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,CAAK,EAAA,EAAA,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA,CAAE,CAAC,CAAC;AACtE,CAAC;;ACUD,MAAM,WAAW,GAAG,CAClB,YAAoB,EACpB,sBAA8B,KACE,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;IAChC,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,CAAS,CAAA,EAAG,YAAY,CAAA,aAAA,CAAe,EAAE;AACvE,QAAA,OAAO,EAAE,EAAE,mBAAmB,EAAE,sBAAsB,EAAE;AACzD,KAAA,CAAC,CAAC;AAEH,IAAA,IAAI,QAAQ,CAAC,MAAM,KAAK,GAAG,EAAE;AAC3B,QAAA,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC;KAC1B;IAED,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;AACjC,QAAA,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC;KAC1B;IAED,OAAO,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,QAAQ,CAAC,IAAI,EAAE,CAAC;AAC/C,CAAC,CAAA,CAAC;MAEW,QAAQ,CAAA;AAanB,IAAA,WAAA,CAAY,MAAuB,EAAA;;AACjC,QAAA,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;QAChB,IAAI,CAAC,YAAY,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;AACjD,QAAA,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC,YAAY,CAAC;AACxC,QAAA,IAAI,CAAC,iBAAiB,GAAG,CAAC,CAAC;AAC3B,QAAA,IAAI,CAAC,sBAAsB,GAAG,MAAM,CAAC,sBAAsB,CAAC;AAC5D,QAAA,IAAI,CAAC,uBAAuB,GAAG,MAAM,CAAC,uBAAuB,CAAC;QAC9D,IAAI,CAAC,iBAAiB,GAAG,CAAA,EAAA,GAAA,MAAM,CAAC,iBAAiB,MAAI,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,IAAI,CAAC;QAC1D,IAAI,CAAC,oBAAoB,GAAG,CAAA,EAAA,GAAA,MAAM,CAAC,oBAAoB,MAAI,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,EAAE,CAAC;AAC9D,QAAA,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;AACtB,QAAA,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;AAC3B,QAAA,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC,YAAY,CAAC;KACzC;IAEO,gBAAgB,GAAA;;AACtB,QAAA,IAAI,IAAI,CAAC,SAAS,EAAE;YAClB,CAAA,EAAA,GAAA,IAAI,CAAC,SAAS,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,kBAAkB,EAAE,CAAC;YACrC,CAAA,EAAA,GAAA,IAAI,CAAC,SAAS,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,KAAK,EAAE,CAAC;SACzB;QAED,IAAI,CAAC,SAAS,GAAG,IAAIA,YAAS,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;QAE7D,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,MAAM,EAAE,MAAK;YAC7B,GAAG,CAAC,kCAAkC,CAAC,CAAC;AAExC,YAAA,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;AAC1B,YAAA,IAAI,CAAC,iBAAiB,GAAG,CAAC,CAAC;AAC7B,SAAC,CAAC,CAAC;QAEH,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,SAAS,EAAE,CAAC,IAAY,KAAI;;AAC5C,YAAA,IAAI;gBACF,MAAM,SAAS,GAAsB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;AAEjE,gBAAA,IAAI,EAAC,CAAA,EAAA,GAAA,SAAS,aAAT,SAAS,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAT,SAAS,CAAE,IAAI,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,SAAS,CAAA,EAAE;oBAC/B,OAAO;iBACR;AAED,gBAAA,MAAM,YAAY,GAAG,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC;AAE9C,gBAAA,IAAI,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;oBACpD,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG;wBACtC,OAAO,EAAE,YAAY,CAAC,OAAO;wBAC7B,KAAK,EACH,CAAA,EAAA,GAAA,YAAY,CAAC,mBAAmB,mCAChC,YAAY,CAAC,OAAO,CAAC,aAAa;qBACrC,CAAC;AAEF,oBAAA,CAAA,EAAA,GAAA,IAAI,KAAJ,IAAA,IAAA,IAAI,uBAAJ,IAAI,CAAE,YAAY,MAAG,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAA,CAAA,IAAA,EAAA,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;oBAE5D,GAAG,CAAC,iBAAiB,YAAY,CAAC,OAAO,CAAC,IAAI,CAAE,CAAA,CAAC,CAAC;iBACnD;aACF;YAAC,OAAO,KAAc,EAAE;AACvB,gBAAA,IAAI,KAAK,YAAY,KAAK,EAAE;AAC1B,oBAAA,GAAG,CAAC,iDAAiD,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;iBACvE;aACF;AACH,SAAC,CAAC,CAAC;AAEH,QAAA,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,IAAI,EAAE,MAAM,KAAI;YAC1C,GAAG,CACD,CAA0C,uCAAA,EAAA,IAAI,CAAa,UAAA,EAAA,MAAM,CAAC,QAAQ,EAAE,CAAE,CAAA,CAC/E,CAAC;YACF,IAAI,CAAC,kBAAkB,EAAE,CAAC;AAC5B,SAAC,CAAC,CAAC;KACJ;IAEO,kBAAkB,GAAA;QACxB,IAAI,IAAI,CAAC,iBAAiB,IAAI,IAAI,CAAC,oBAAoB,EAAE;YACvD,GAAG,CACD,iFAAiF,CAClF,CAAC;YACF,OAAO;SACR;QAED,IAAI,CAAC,iBAAiB,EAAE,CAAC;AAEzB,QAAA,UAAU,CAAC,MAAM,IAAI,CAAC,gBAAgB,EAAE,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;KACnE;IACY,UAAU,GAAA;;;YAErB,IAAI,CAAC,IAAI,CAAC,YAAY,IAAI,CAAC,IAAI,CAAC,sBAAsB,EAAE;AACtD,gBAAA,MAAM,IAAI,KAAK,CACb,2DAA2D,CAC5D,CAAC;aACH;AAED,YAAA,MAAM,KAAK,GAAG,MAAM,WAAW,CAC7B,IAAI,CAAC,YAAY,EACjB,IAAI,CAAC,sBAAsB,CAC5B,CAAC;YAEF,IAAI,CAAC,KAAK,CAAC,MAAM,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE;AAChC,gBAAA,MAAM,IAAI,KAAK,CAAC,6CAA6C,CAAC,CAAC;aAChE;YAED,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,KAAI;;AAC1B,gBAAA,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;oBAC7C,OAAO;iBACR;gBACD,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG;oBAC9B,OAAO,EAAE,IAAI,CAAC,OAAO;oBACrB,KAAK,EAAE,CAAA,EAAA,GAAA,IAAI,CAAC,mBAAmB,mCAAI,IAAI,CAAC,OAAO,CAAC,aAAa;iBAC9D,CAAC;AACJ,aAAC,CAAC,CAAC;;YAGH,IAAI,CAAC,gBAAgB,EAAE,CAAC;SACzB,CAAA,CAAA;AAAA,KAAA;AAEM,IAAA,OAAO,CAAC,QAAgB,EAAA;AAC7B,QAAA,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;AACvB,YAAA,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;SACvE;AAED,QAAA,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;KAC7B;AACF;;;;;"}